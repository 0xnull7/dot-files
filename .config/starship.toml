# SOURCES
# https://starship.rs/config
# https://starship.rs/presets/nerd-font.html#configuration

# DEBUG via:
# starship explain
# STARSHIP_LOG=trace

"$schema" = 'https://starship.rs/config-schema.json'

# Timeout for commands executed by starship (ms)
command_timeout = 1000

# newline between commands
add_newline = true

# ! opt-in for individual modules (e.g., aws, docker, gcloud, nodejs, python)
# standalone format to get os glyph on ps1 line,
# prompt character below

#format = """
#$os$username$hostname:$directory$git_branch$git_status$git_commit$python$cmd_duration
#$character\
#"""

# format = """
# [‚îå‚îÄ‚îÄ‚îÄ](bold blue) $os$username$hostname:$directory$git_branch$git_status$git_commit$python$cmd_duration
# [‚îÇ](bold blue)
# [‚îî‚îÄÓ¨¨](bold blue) """

format = """
[‚îå‚îÄ‚îÄ‚îÄ](bold color_orange)[ÓÇ∂](color_orange)\
$os\
$username\
[ÓÇ∞](bg:hot_orange fg:color_orange)\
$hostname\
[ÓÇ∞](bg:color_yellow fg:hot_orange)\
$directory\
[ÓÇ∞](fg:color_yellow bg:color_aqua)\
$git_branch\
$git_status\
$git_commit\
[ÓÇ∞](fg:color_aqua bg:color_blue)\
$cmd_duration\
[ÓÇ∞](fg:color_blue bg:color_bg3)\
$shell\
[ÓÇ∞](fg:color_bg3 bg:color_bg1)\
$aws\
$c\
$cmake\
$dotnet\
$java\
$lua\
$nodejs\
$python\
$rust\
[ÓÇ¥ ](fg:color_bg1)
[‚îÇ](bold color_orange)
[‚îî‚îÄÓ¨¨](bold color_orange) """

palette = 'gruvbox_dark'

[palettes.gruvbox_dark]
color_fg0     = '#fbf1c7'
color_bg1     = '#3c3836'
color_bg3     = '#665c54'
color_blue    = '#458588'
color_aqua    = '#689d6a'
color_green   = '#98971a'
color_orange  = '#d65d0e'
color_purple  = '#b16286'
color_red     = '#cc241d'
color_yellow  = '#d79921'
hot_orange    = '#fe8019'
hot_blue      = '#1C3A5E'
hot_green     = "#148D14" # GreenYellow

[os]
disabled = false
style = "bg:color_orange fg:color_fg0"
format = '[$symbol]($style)'

[os.symbols]
Alpaquita = "Ó™¢ "
Alpine = "ÔåÄ "
Amazon = "Ôâ∞ "
Android = "ÔÖª "
Arch = "ÔåÉ "
Artix = "Ôåü "
CentOS = "ÔåÑ "
Debian = "ÔåÜ "
DragonFly = "Óäé "
Emscripten = "ÔàÖ "
EndeavourOS = "ÔÜó "
Fedora = "Ôåä "
FreeBSD = "Ôåå "
Garuda = "Û∞õì "
Gentoo = "Ôåç "
HardenedBSD = "Û∞ûå "
Illumos = "Û∞à∏ "
Linux = "Ôåö "
Mabox = "Ó¨© "
Macos = "ÔåÇ "
Manjaro = "Ôåí "
Mariner = "Ôáç "
MidnightBSD = "ÔÜÜ "
Mint = "Ôåé "
NetBSD = "ÔÄ§ "
NixOS = "Ôåì "
OpenBSD = "Û∞à∫ "
openSUSE = "Ôåî "
OracleLinux = "Û∞å∑ "
Pop = "Ôå™ "
Raspbian = "Ôåï "
Redhat = "Ôåñ "
RedHatEnterprise = "Ôåñ "
Redox = "Û∞Äò "
Solus = "Û∞†≥ "
SUSE = "Ôåî "
Ubuntu = "Ôåõ "
Unknown = "Ôà≠ "
Windows = "Û∞ç≤ "

[username]
show_always = true
style_user = "bold bg:color_orange fg:color_fg0"
style_root = "bold bg:color_orange fg:color_fg0"
format = '[ $user ]($style)'
disabled = false

[hostname]
ssh_only = false
style = "bold bg:hot_orange fg:color_fg0"
format = "[@$hostname]($style)"
disabled = false

# truncation length works backwards (i.e., cwd > parent > parent ...)
[directory]
style = "bold fg:color_bg1 bg:color_yellow"
format = "[ $path ]($style)"
truncation_length = 10
truncation_symbol = "‚Ä¶/"
truncate_to_repo = true

[directory.substitutions]
"Documents" = " Û∞àô "
"Downloads" = " ÔÄô "
"Music" = " Û∞ùö "
"Pictures" = " ÔÄæ "
"_Dev" = " Û∞≤ã "

[git_branch]
truncation_length = 10
symbol = "Óúâ Ôêò "
style = "bold bg:color_aqua"
format = '[[ $symbol $branch (:$remote_branch) ](bold fg:color_fg0 bg:color_aqua)]($style)'

[git_status]
style      = "bold bg:color_aqua"
format     = "[[($all_status$ahead_behind )](fg:color_fg0 bg:color_aqua)]($style)"
stashed    = "[${count}*](bold bg:color_aqua fg:hot_green)"
modified   = "[${count}+](bold bg:color_aqua fg:color_orange)"
untracked  = "[${count}?](bold bg:color_aqua fg:color_bg1)"
deleted    = "[${count}-](bold bg:color_aqua fg:color_red)"
conflicted = "[${count}~](bold bg:color_aqua fg:color_red)"
ahead      = "[‚á°${count}](bold bg:color_aqua fg:hot_blue)"
behind     = "[‚á£${count}](bold bg:color_aqua fg:color_bg1)"
staged     = "[${count}+](bold bg:color_aqua fg:hot_green)"

[git_commit]
commit_hash_length = 7
format = '[\($hash$tag\)]($style) '
style = "bold bg:color_aqua fg:color_fg0"
tag_disabled = false
tag_symbol = "ÔÄ´ "
disabled =false

[cmd_duration]
min_time = 4
show_milliseconds = false
disabled = false
format = "[ Ôê∫ $duration ]($style)"
style = "bold bg:color_blue fg:color_fg0"

[shell]
bash_indicator = ' ÓØä | bash '
cmd_indicator = ' ÓØÑ  | cmd '
fish_indicator = ' Û∞à∫ | fish '
powershell_indicator = ' Ó°¨ | pwsh '
unknown_indicator = ' Unknown Shell '
zsh_indicator = ' zsh '
style = "bold bg:color_bg3 fg:color_fg0"
format = '[$indicator]($style)'
disabled = false


[aws]
symbol = "ÓåΩ  "
style = "bold bg:color_bg1 fg:color_fg0"

[c]
format = 'via [$symbol($version(-$name) )]($style)'
version_format = "v${raw}"
style = "bold bg:color_bg1 fg:color_fg0"
symbol = "Óù±/Óòù "
detect_extensions = ["c", "h", "cc", "cpp", "hh", "hpp"]
commands = [ [ 'gcc', '--version' ], [ 'g++', '--version' ], [ 'clang', '--version'] ]
disabled = false

[cmake]
format = 'via [$symbol($version_format]($style)'
version_format = "v${raw}"
style = "bold bg:color_bg1 fg:color_fg0"
symbol = "Óûî "
detect_files = ['CMakeLists.txt', 'CMakeCache.txt']
# commands = [ [ 'cmake', '--version' ] ]
disabled = false

[dart]
symbol = "Óûò "
style = "bold bg:color_bg1 fg:color_fg0"

[docker_context]
symbol = "Ôåà "
format = "via [$symbol$context]($style) "
style = "bold bg:color_bg1 fg:color_fg0"
only_with_files = true
detect_files = ["docker-compose.yml", "docker-compose.yaml", "Dockerfile"]
detect_folders = []
disabled = false

[dotnet]
format = 'via [$symbol($version_format)(üéØ $tfm )]($style)'
version_format = 'v${raw}'
symbol = 'ÓüÜ '
style = "bold bg:color_bg1 fg:color_fg0"
detect_extensions = ['csproj', 'fsproj', 'xproj']
detect_files = ['global.json', 'project.json', 'Directory.Build.props', 'Directory.Build.targets', 'Packages.props']
heuristic = true

[elixir]
symbol = "Óâµ "
style = "bold bg:color_bg1 fg:color_fg0"

[elm]
symbol = "Óò¨ "
style = "bold bg:color_bg1 fg:color_fg0"

[golang]
symbol = "Óòß "
format = 'via [$symbol($version )($style)'
version = 'v${raw}'
style = "bold bg:color_bg1 fg:color_fg0"
not_capable_style = "bold bg:color_bg1 fg:color_red"
detect_extensions = ['go']
detect_files = ['go.mod', 'go.sum', 'go.work', 'glide.yaml', 'Gopkg.yml', 'Gopkg.lock', '.go-version']
detect_folders = ['Godeps']

[haskell]
symbol = "Œª "
style = "bold bg:color_bg1 fg:color_fg0"

[java]
symbol = "Óâñ "
format = 'via [$symbol($version_format )($style)'
version_format = 'v${raw}'
style = "bold bg:color_bg1 fg:color_fg0"
detect_extensions = ['java', 'class', 'gradle', 'jar', 'cljs', 'cljc']
detect_files = ['pom.xml', 'build.gradle.kts', 'build.sbt', '.java-version', 'deps.edn', 'project.clj', 'build.boot', '.sdkmanrc']

[julia]
symbol = "Óò§ "
style = "bold bg:color_bg1 fg:color_fg0"

[kotlin]
symbol = 'Û±àô '
format = 'via [$symbol($version(-$name) )($style)'
version = 'v${raw}'
style = "bold bg:color_bg1 fg:color_fg0"
detect_extensions = ['kt', 'kts']
# Uses the Kotlin Compiler binary to get the installed version
kotlin_binary = 'kotlinc'

[lua]
symbol = 'Û∞¢± '
format = 'via [$symbol($version_format )($style)'
version_format = 'v${raw}'
style = "bold bg:color_bg1 fg:color_fg0"
detect_extensions = ['lua']
detect_files = ['.lua-version']
lua_binary = 'lua'

[nim]
symbol = "Ó°Å "
style = "bold bg:color_bg1 fg:color_fg0"
format = 'via [$symbol($version )($style)'
version = 'v${raw}'
detect_extensions = ['nim', 'nims', 'nimble']
detect_files = ['nim.cfg']

[nodejs]
symbol = "Óúô "
format = 'via [$symbol($version_format )($style)'
version_format = 'v${raw}'
style = "bold bg:color_bg1 fg:color_fg0"
detect_extensions = ['js', 'mjs', 'cjs', 'ts', 'mts', 'cts']
detect_files = ['package.json', '.node-version', '.nvmrc']
detect_folders = ['node-modules']
not_capable_style = "bold bg:color_bg1 fg:color_fg0"

[perl]
symbol = "Óù© "
style = "bold bg:color_bg1 fg:color_fg0"

[php]
symbol = "Óòà "
style = "bold bg:color_bg1 fg:color_fg0"

[python]
symbol = "Û∞å† "
style = "bold bg:color_bg1 fg:color_fg0"
#pyenv_version_name = true
format = 'via [${symbol}python (${version} )(\($virtualenv\) )]($style)'
version_format = "v${raw}"
pyenv_prefix = "venv "
python_binary = ["./venv/bin/python", "python", "python3", "python2"]
detect_extensions = ["py", 'ipynb']
detect_files = ['.python-version', 'Pipfile', '__init__.py', 'pyproject.toml', 'requirements.txt', 'setup.py', 'tox.ini', 'pixi.toml']

[ruby]
symbol = "Óàæ "
style = "bold bg:color_bg1 fg:color_fg0"

[rust]
symbol = "Óû® "
style = "bold bg:color_bg1 fg:color_fg0"
format = 'via [$symbol($version )]($style)'
version_format = "v${raw}"
detect_extensions = ["rs"]
detect_files = ['Cargo.toml']

# [status]
# style = 'bg:blue'
# symbol = 'üî¥ '
# success_symbol = 'üü¢ SUCCESS'
# format = '[\[$symbol$common_meaning$signal_name$maybe_int\]]($style) '
# map_symbol = true
# disabled = false

# Replace the "‚ùØ" symbol in the prompt with "‚ûú"
# [character]                            # The name of the module we are configuring is "character"
# success_symbol = "[‚ûú](bold green)"     # The "success_symbol" segment is being set to "‚ûú" with the color "bold green"
# error_symbol = "[‚úó](bold red)"

